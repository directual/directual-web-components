import Editor from '../components/fps/editor/editor';

// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export

export default {
    title: 'FPS/Components/Editor',
    component: Editor,
    parameters: {
        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
        layout: 'left',
    },
    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
    tags: ['autodocs']
};

const editorData = {
    "sl": "get",
    "content": "textHTML",
    "readonly": "false",
    "isExistingObject": "false",
    "label": "label",
    "blocks": "blocks",
    "contentHTML": "textHTML",
    "attachments": "file",
    "__libs__": [],
    "__header__": "",
    "__initialize__": null,
    "__destroy__": null,
    "__data__": {
        "attachments": "file",
        "readonly": "false",
        "blocks": "blocks",
        "sl": [
            {
                "blocks": "{\"time\":1725967463410,\"version\":\"2.30.5\",\"blocks\":[{\"id\":\"nwAkjsmkWN\",\"data\":{\"text\":\"Hey. Meet the new Editor. Then, try a demo ü§ì\"},\"type\":\"paragraph\"},{\"id\":\"jplA_iRSbm\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"–ë–û–õ–¨–®–ê–Ø –ö–ê–†–¢–ò–ù–ö–ê\"}},{\"id\":\"pn8vEkcOtk\",\"data\":{\"caption\":\"–î–∞-–¥–∞, –±–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞\",\"stretched\":false,\"file\":{\"url\":\"https://api.directual.com/fileUploaded/kot-sandbox/7366b897-32ca-4c91-975c-3ad12433c907.jpg\"},\"withBackground\":false,\"withBorder\":false},\"type\":\"image\"},{\"id\":\"xJPmBnWxg0\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"–ö–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–æ –ø–æ–º–µ–Ω—å—à–µ\"}},{\"id\":\"BNrpoVEt3M\",\"data\":{\"caption\":\"–ü–µ—Å–µ–ª—å\",\"stretched\":false,\"file\":{\"url\":\"https://api.directual.com/fileUploaded/kot-sandbox/13a48623-478e-4b33-8f51-9c8c0cca2f50.jpg\"},\"withBackground\":false,\"withBorder\":false},\"type\":\"image\"},{\"id\":\"67o_VgVcmG\",\"data\":{\"text\":\"<u class=\\\"cdx-underline\\\">–Ø —É–º–µ—é –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç</u>\"},\"type\":\"paragraph\"},{\"id\":\"KOp6VpsZUA\",\"data\":{\"text\":\"<b><i>–í–æ–∑–º–æ–∂–Ω–æ –Ω–∏–∂–µ –¥–∞–∂–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —é—Ç—É–±</i></b>\"},\"type\":\"paragraph\"},{\"id\":\"qw1YSt11_z\",\"data\":{\"service\":\"youtube\",\"length\":\"\",\"width\":580,\"caption\":\"–Æ—Ç—É–±—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\",\"source\":\"https://www.youtube.com/watch?v=ZFl1jFWXjoc&list=RDMMZFl1jFWXjoc&start_radio=1&ab_channel=RussianVillageBoys\",\"embed\":\"https://www.youtube.com/embed/ZFl1jFWXjoc?\",\"height\":320},\"type\":\"embed\"},{\"id\":\"j01PjyNEex\",\"data\":{\"title\":\"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ&nbsp;\",\"message\":\"–ù—É –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ç–µ–∫—Å—Ç –∫–∞–∫–æ–π-—Ç–æ\"},\"type\":\"warning\"},{\"id\":\"30jJJVJMJo\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"–í–∞—É, –¥–∞–∂–µ –∫–æ–¥ –µ—Å—Ç—å\"}},{\"id\":\"PcJ2-7mQze\",\"type\":\"raw\",\"data\":{\"html\":\"        <div className={`FPS_EDITOR_WRAPPER`}>\\n            <div>\\n                <div id={EDITOR_HOLDER_ID}/>\\n            </div>\\n            <div>\\n                {\\n                    !isReadonly &&\\n                    <div>\\n                        <Button accent icon=\\\"edit\\\" onClick={handleSave}>Save</Button>\\n                    </div>\\n                }\\n            </div>\\n        </div>\"}},{\"id\":\"xzKhOeztTp\",\"data\":{\"items\":[{\"checked\":true,\"text\":\"–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\"},{\"checked\":false,\"text\":\"–Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\"},{\"checked\":false,\"text\":\"—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ, –Ω–æ –Ω–µ —Ç–∞–∫ –∫–∞–∫ –Ω–∞–¥–æ\"}]},\"type\":\"checklist\"},{\"id\":\"6qqCn983cC\",\"type\":\"table\",\"data\":{\"content\":[[\"table column one\",\"table column two\"],[\"1\",\"2\"],[\"3\",\"4\"],[\"5\",\"6\"]],\"withHeadings\":false}},{\"id\":\"cRICNo60jD\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"wAVIk6EtkV\",\"data\":{\"caption\":\"–ë—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –±–ª–æ–∫–∞—Ö¬†\",\"code\":\"sequenceDiagram\\n    participant Alice\\n    participant Bob\\n    Alice->>John: Hello John, how are you?\\n    loop HealthCheck\\n        John->>John: Fight against hypochondria\\n    end\\n    Note right of John: Rational thoughts <br/>prevail!\\n    John-->>Alice: Great!\\n    John->>Bob: How about you?\\n    Bob-->>John: Jolly good!\"},\"type\":\"mermaid\"},{\"id\":\"Sie-2P9Hd_\",\"type\":\"header\",\"data\":{\"level\":1,\"text\":\"Header 1\"}},{\"id\":\"dFI3InPbpf\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"Header 2\"}},{\"id\":\"EdVHX0oGsE\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"Header 3\"}},{\"id\":\"SQNSsWZ4GQ\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Header 4\"}},{\"id\":\"-OnIfi-rDA\",\"type\":\"header\",\"data\":{\"level\":5,\"text\":\"Header 5\"}},{\"id\":\"VS_YAHv6sf\",\"type\":\"header\",\"data\":{\"level\":6,\"text\":\"Header 6\"}},{\"id\":\"6TM6WbHurt\",\"data\":{\"text\":\"<b><i>–¢–∏–ø–∞ –∫–æ–¥</i></b>\"},\"type\":\"paragraph\"},{\"id\":\"P91JXh0vA3\",\"type\":\"code\",\"data\":{\"code\":\"const handleChange = useCallback(async () => {\\n  var savedData = await editorCore.current.save();\\n  setEditorData(savedData);\\n}, []);\"}},{\"id\":\"kMwQH3_AhB\",\"type\":\"list\",\"data\":{\"items\":[\"1. —Å–ø–∏—Å–æ–∫\\\\\"],\"style\":\"ordered\"}},{\"id\":\"HQsVoLZFuw\",\"data\":{\"caption\":\"–≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\",\"text\":\"—Ü–∏—Ç–∞—Ç–∫–∏\",\"alignment\":\"left\"},\"type\":\"quote\"},{\"id\":\"fogn-mqxZW\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"–æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É —Ä–∞–≤–µ–Ω 300px\"}},{\"id\":\"vT-MVjAe9i\",\"type\":\"paragraph\",\"data\":{\"text\":\"<i><mark class=\\\"cdx-marker\\\">–Ω–∞ header –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫–µ—Ä</mark></i>\"}},{\"id\":\"7eQk8y1ecJ\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"–ó–∞–∫–∏–Ω–µ–º –Ω–∏–∂–µ —Å—Ç–∞—Ç—å—é –∏–∑ —Å–∞–π—Ç–∞\"}},{\"id\":\"WNaiEL-bx_\",\"type\":\"header\",\"data\":{\"level\":1,\"text\":\"useState\"}},{\"id\":\"jOi78jxZhI\",\"data\":{\"text\":\"<code>useState</code> is a React Hook that lets you add a <a href=\\\"https://react.dev/learn/state-a-components-memory\\\">state variable</a> to your component.\"},\"type\":\"paragraph\"},{\"id\":\"updv0cWNfg\",\"type\":\"code\",\"data\":{\"code\":\"const [state, setState] = useState(initialState)\"}},{\"id\":\"IBQnlJ6C2Y\",\"data\":{\"items\":[\"ReferenceuseState(initialState)set&nbsp;functions, like&nbsp;setSomething(nextState)\",\"useState(initialState)\",\"set&nbsp;functions, like&nbsp;setSomething(nextState)\",\"UsageAdding state to a componentUpdating state based on the previous stateUpdating objects and arrays in stateAvoiding recreating the initial stateResetting state with a keyStoring information from previous renders\",\"Adding state to a component\",\"Updating state based on the previous state\",\"Updating objects and arrays in state\",\"Avoiding recreating the initial state\",\"Resetting state with a key\",\"Storing information from previous renders\",\"TroubleshootingI‚Äôve updated the state, but logging gives me the old valueI‚Äôve updated the state, but the screen doesn‚Äôt updateI‚Äôm getting an error: ‚ÄúToo many re-renders‚ÄùMy initializer or updater function runs twiceI‚Äôm trying to set state to a function, but it gets called instead\",\"I‚Äôve updated the state, but logging gives me the old value\",\"I‚Äôve updated the state, but the screen doesn‚Äôt update\",\"I‚Äôm getting an error: ‚ÄúToo many re-renders‚Äù\",\"My initializer or updater function runs twice\",\"I‚Äôm trying to set state to a function, but it gets called instead\"],\"style\":\"unordered\"},\"type\":\"list\"},{\"id\":\"G15KD_Dg3W\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"iisyCH8Aun\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"Reference&nbsp;\"}},{\"id\":\"dXgQSRuQvR\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"useState(initialState)&nbsp;\"}},{\"id\":\"caFlL1Rm41\",\"data\":{\"text\":\"Call <code>useState</code> at the top level of your component to declare a <a href=\\\"https://react.dev/learn/state-a-components-memory\\\">state variable.</a>\"},\"type\":\"paragraph\"},{\"id\":\"rwdXi-GRHh\",\"type\":\"code\",\"data\":{\"code\":\"import { useState } from 'react';function MyComponent() {  const [age, setAge] = useState(28);  const [name, setName] = useState('Taylor');  const [todos, setTodos] = useState(() => createTodos());  // ...\"}},{\"id\":\"56LVRirHfZ\",\"data\":{\"text\":\"The convention is to name state variables like <code>[something, setSomething]</code> using <a href=\\\"https://javascript.info/destructuring-assignment\\\" target=\\\"_blank\\\">array destructuring.</a>\"},\"type\":\"paragraph\"},{\"id\":\"xcgEY2HD9V\",\"data\":{\"text\":\"<a href=\\\"https://react.dev/reference/react/useState#usage\\\">See more examples below.</a>\"},\"type\":\"paragraph\"},{\"id\":\"xRGbLFnakT\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Parameters&nbsp;\"}},{\"id\":\"zVNzGakUz3\",\"type\":\"list\",\"data\":{\"items\":[\"initialState: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.If you pass a function as&nbsp;initialState, it will be treated as an&nbsp;initializer function. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.&nbsp;See an example below.\",\"If you pass a function as&nbsp;initialState, it will be treated as an&nbsp;initializer function. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.&nbsp;See an example below.\"],\"style\":\"unordered\"}},{\"id\":\"Xbx9fOCKTk\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Returns&nbsp;\"}},{\"id\":\"UaI4Dp8BLb\",\"data\":{\"text\":\"<code>useState</code> returns an array with exactly two values:\"},\"type\":\"paragraph\"},{\"id\":\"4mT91AJui9\",\"data\":{\"items\":[\"The current state. During the first render, it will match the&nbsp;initialState&nbsp;you have passed.\",\"The&nbsp;set&nbsp;function&nbsp;that lets you update the state to a different value and trigger a re-render.\"],\"style\":\"ordered\"},\"type\":\"list\"},{\"id\":\"CNYtxipwle\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Caveats&nbsp;\"}},{\"id\":\"SsLRZDTjRx\",\"type\":\"list\",\"data\":{\"items\":[\"useState&nbsp;is a Hook, so you can only call it&nbsp;at the top level of your component&nbsp;or your own Hooks. You can‚Äôt call it inside loops or conditions. If you need that, extract a new component and move the state into it.\",\"In Strict Mode, React will&nbsp;call your initializer function twice&nbsp;in order to&nbsp;help you find accidental impurities.&nbsp;This is development-only behavior and does not affect production. If your initializer function is pure (as it should be), this should not affect the behavior. The result from one of the calls will be ignored.\"],\"style\":\"unordered\"}},{\"id\":\"y2wrdPv2S1\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"PuqHmfkp1Y\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"set&nbsp;functions, like&nbsp;setSomething(nextState)&nbsp;\"}},{\"id\":\"nYO14uGVbE\",\"data\":{\"text\":\"The <code>set</code> function returned by <code>useState</code> lets you update the state to a different value and trigger a re-render. You can pass the next state directly, or a function that calculates it from the previous state:\"},\"type\":\"paragraph\"},{\"id\":\"Hk_KnzRACd\",\"type\":\"code\",\"data\":{\"code\":\"const [name, setName] = useState('Edward');function handleClick() {  setName('Taylor');  setAge(a => a + 1);  // ...\"}},{\"id\":\"EhPdMPiEtj\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Parameters&nbsp;\"}},{\"id\":\"gZLRmW1rXQ\",\"type\":\"list\",\"data\":{\"items\":[\"nextState: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.If you pass a function as&nbsp;nextState, it will be treated as an&nbsp;updater function. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.&nbsp;See an example below.\",\"If you pass a function as&nbsp;nextState, it will be treated as an&nbsp;updater function. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.&nbsp;See an example below.\"],\"style\":\"unordered\"}},{\"id\":\"TmsbE7oC_V\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Returns&nbsp;\"}},{\"id\":\"MB69AzxkyH\",\"data\":{\"text\":\"<code>set</code> functions do not have a return value.\"},\"type\":\"paragraph\"},{\"id\":\"3c8aIDkI16\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Caveats&nbsp;\"}},{\"id\":\"l99YVzhjHO\",\"type\":\"list\",\"data\":{\"items\":[\"The set function only updates the state variable for the next render. If you read the state variable after calling the set function, you will still get the old value that was on the screen before your call.\",\"If the new value you provide is identical to the current state, as determined by an Object.is comparison, React will skip re-rendering the component and its children. This is an optimization. Although in some cases React may still need to call your component before skipping the children, it shouldn‚Äôt affect your code.\",\"React batches state updates. It updates the screen after all the event handlers have run and have called their set functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use flushSync.\",\"Calling the set function during rendering is only allowed from within the currently rendering component. React will discard its output and immediately attempt to render it again with the new state. This pattern is rarely needed, but you can use it to store information from the previous renders. See an example below.\",\"In Strict Mode, React will call your updater function twice in order to help you find accidental impurities. This is development-only behavior and does not affect production. If your updater function is pure (as it should be), this should not affect the behavior. The result from one of the calls will be ignored.\"],\"style\":\"unordered\"}},{\"id\":\"dX99WheE8e\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"mkt5Jy_D1M\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"Usage&nbsp;\"}},{\"id\":\"R8vV8WxcJi\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"Adding state to a component&nbsp;\"}},{\"id\":\"LtlzFeCUv3\",\"data\":{\"text\":\"Call <code>useState</code> at the top level of your component to declare one or more <a href=\\\"https://react.dev/learn/state-a-components-memory\\\">state variables.</a>\"},\"type\":\"paragraph\"},{\"id\":\"HXBf4XvKU6\",\"type\":\"code\",\"data\":{\"code\":\"import { useState } from 'react';function MyComponent() {  const [age, setAge] = useState(42);  const [name, setName] = useState('Taylor');  // ...\"}},{\"id\":\"2RkSMQCWX1\",\"data\":{\"text\":\"The convention is to name state variables like <code>[something, setSomething]</code> using <a href=\\\"https://javascript.info/destructuring-assignment\\\" target=\\\"_blank\\\">array destructuring.</a>\"},\"type\":\"paragraph\"},{\"id\":\"B1ML2HDz2G\",\"data\":{\"text\":\"<code>useState</code> returns an array with exactly two items:\"},\"type\":\"paragraph\"},{\"id\":\"zIUDZMi94U\",\"data\":{\"items\":[\"The&nbsp;current state&nbsp;of this state variable, initially set to the&nbsp;initial state&nbsp;you provided.\",\"The&nbsp;set&nbsp;function&nbsp;that lets you change it to any other value in response to interaction.\"],\"style\":\"ordered\"},\"type\":\"list\"},{\"id\":\"AFIfhk-slF\",\"data\":{\"text\":\"To update what‚Äôs on the screen, call the <code>set</code> function with some next state:\"},\"type\":\"paragraph\"},{\"id\":\"rM4vvdrzkO\",\"type\":\"code\",\"data\":{\"code\":\"function handleClick() {  setName('Robin');}\"}},{\"id\":\"yavYlLVXvT\",\"data\":{\"text\":\"React will store the next state, render your component again with the new values, and update the UI.\"},\"type\":\"paragraph\"},{\"id\":\"pM8sVCn7Ki\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"Pitfall\"}},{\"id\":\"7SnWExJ8yx\",\"data\":{\"text\":\"Calling the <code>set</code> function <a href=\\\"https://react.dev/reference/react/useState#ive-updated-the-state-but-logging-gives-me-the-old-value\\\">does not change the current state in the already executing code</a>:\"},\"type\":\"paragraph\"},{\"id\":\"MnPNSYRkLO\",\"type\":\"code\",\"data\":{\"code\":\"function handleClick() {  setName('Robin');  console.log(name); // Still \\\"Taylor\\\"!}\"}},{\"id\":\"4CuJ8iaxA-\",\"data\":{\"text\":\"It only affects what <code>useState</code> will return starting from the next render.\"},\"type\":\"paragraph\"},{\"id\":\"hj_NaDXewz\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Examples of objects and arrays in state\"}},{\"id\":\"IVtkkApSBt\",\"data\":{\"text\":\"1.Form (object)2.Form (nested object)3.List (array)4.Writing concise update logic with Immer\"},\"type\":\"paragraph\"},{\"id\":\"vlorwfJzHD\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Example&nbsp;1&nbsp;of&nbsp;4:&nbsp;Form (object)&nbsp;\"}},{\"id\":\"a0I9R0lr99\",\"data\":{\"text\":\"In this example, the <code>form</code> state variable holds an object. Each input has a change handler that calls <code>setForm</code> with the next state of the entire form. The <code>{ ...form }</code> spread syntax ensures that the state object is replaced rather than mutated.\"},\"type\":\"paragraph\"},{\"id\":\"vuQqVVEmVB\",\"data\":{\"text\":\"App.jsDownloadResetFork123456789101112131415161718192021222324252627282930313233343536import{useState}from'react';exportdefaultfunctionForm(){const[form,setForm] = useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com',});return(&lt;&gt;&lt;label&gt;        First name:&lt;inputvalue={form.firstName}onChange={e=&gt;{setForm({...form,firstName:e.target.value});}}/&gt;&lt;/label&gt;&lt;label&gt;        Last name:&lt;inputvalue={form.lastName}onChange={e=&gt;{setForm({...form,lastName:e.target.value});}}/&gt;&lt;/label&gt;&lt;label&gt;Show moreNextExample\"},\"type\":\"paragraph\"},{\"id\":\"WZL2rFBPZB\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"bz5WpnaQZT\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"Avoiding recreating the initial state&nbsp;\"}},{\"id\":\"2FyMJONDnZ\",\"data\":{\"text\":\"React saves the initial state once and ignores it on the next renders.\"},\"type\":\"paragraph\"},{\"id\":\"NtARzDP59V\",\"type\":\"code\",\"data\":{\"code\":\"function TodoList() {  const [todos, setTodos] = useState(createInitialTodos());  // ...\"}},{\"id\":\"-koDCpfBdI\",\"data\":{\"text\":\"Although the result of <code>createInitialTodos()</code> is only used for the initial render, you‚Äôre still calling this function on every render. This can be wasteful if it‚Äôs creating large arrays or performing expensive calculations.\"},\"type\":\"paragraph\"},{\"id\":\"UiqYHMKv_P\",\"data\":{\"text\":\"To solve this, you may pass it as an initializer function to <code>useState</code> instead:\"},\"type\":\"paragraph\"},{\"id\":\"DlXYopj2an\",\"type\":\"code\",\"data\":{\"code\":\"function TodoList() {  const [todos, setTodos] = useState(createInitialTodos);  // ...\"}},{\"id\":\"IizoFrkEwe\",\"data\":{\"text\":\"Notice that you‚Äôre passing <code>createInitialTodos</code>, which is the function itself, and not <code>createInitialTodos()</code>, which is the result of calling it. If you pass a function to <code>useState</code>, React will only call it during initialization.\"},\"type\":\"paragraph\"},{\"id\":\"Dmu6B2ocFG\",\"data\":{\"text\":\"React may <a href=\\\"https://react.dev/reference/react/useState#my-initializer-or-updater-function-runs-twice\\\">call your initializers twice</a> in development to verify that they are <a href=\\\"https://react.dev/learn/keeping-components-pure\\\">pure.</a>\"},\"type\":\"paragraph\"},{\"id\":\"WZbL4xH9jw\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"The difference between passing an initializer and passing the initial state directly\"}},{\"id\":\"5hbQFpWbUZ\",\"data\":{\"text\":\"1.Passing the initializer function2.Passing the initial state directly\"},\"type\":\"paragraph\"},{\"id\":\"hPvDvGR1Zl\",\"type\":\"header\",\"data\":{\"level\":4,\"text\":\"Example&nbsp;1&nbsp;of&nbsp;2:&nbsp;Passing the initializer function&nbsp;\"}},{\"id\":\"P4FXoez2NV\",\"type\":\"paragraph\",\"data\":{\"text\":\"This example passes the initializer function, so the <code>createInitialTodos</code> function only runs during initialization. It does not run when component re-renders, such as when you type into the input.\"}},{\"id\":\"C4i_InQdMg\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"X-jiUZzRdT\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"Resetting state with a key&nbsp;\"}},{\"id\":\"yWqwY0FGQu\",\"data\":{\"text\":\"You‚Äôll often encounter the <code>key</code> attribute when <a href=\\\"https://react.dev/learn/rendering-lists\\\">rendering lists.</a> However, it also serves another purpose.\"},\"type\":\"paragraph\"},{\"id\":\"tyqS6sELc3\",\"type\":\"paragraph\",\"data\":{\"text\":\"You can reset a component‚Äôs state by passing a different <code>key</code> to a component. In this example, the Reset button changes the <code>version</code> state variable, which we pass as a <code>key</code> to the <code>Form</code>. When the <code>key</code> changes, React re-creates the <code>Form</code> component (and all of its children) from scratch, so its state gets reset.\"}},{\"id\":\"iq5_ZkrUds\",\"data\":{\"text\":\"Read <a href=\\\"https://react.dev/learn/preserving-and-resetting-state\\\">preserving and resetting state</a> to learn more.\"},\"type\":\"paragraph\"},{\"id\":\"JtW_kvg2wM\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"rbrd3qtpqM\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"Storing information from previous renders&nbsp;\"}},{\"id\":\"lxVGs01WIm\",\"type\":\"paragraph\",\"data\":{\"text\":\"Usually, you will update state in event handlers. However, in rare cases you might want to adjust state in response to rendering ‚Äî for example, you might want to change a state variable when a prop changes.\"}},{\"id\":\"nkD-OnlngJ\",\"type\":\"paragraph\",\"data\":{\"text\":\"In most cases, you don‚Äôt need this:\"}},{\"id\":\"ktGtmLqFJx\",\"data\":{\"items\":[\"If the value you need can be computed entirely from the current props or other state,&nbsp;remove that redundant state altogether.&nbsp;If you‚Äôre worried about recomputing too often, the&nbsp;useMemo&nbsp;Hook&nbsp;can help.\",\"If you want to reset the entire component tree‚Äôs state,&nbsp;pass a different&nbsp;key&nbsp;to your component.\",\"If you can, update all the relevant state in the event handlers.\"],\"style\":\"unordered\"},\"type\":\"list\"},{\"id\":\"8gDV5V9c6K\",\"data\":{\"text\":\"In the rare case that none of these apply, there is a pattern you can use to update state based on the values that have been rendered so far, by calling a <code>set</code> function while your component is rendering.\"},\"type\":\"paragraph\"},{\"id\":\"rOC4lMnaA2\",\"data\":{\"text\":\"Here‚Äôs an example. This <code>CountLabel</code> component displays the <code>count</code> prop passed to it:\"},\"type\":\"paragraph\"},{\"id\":\"MnTFi6CdCe\",\"type\":\"code\",\"data\":{\"code\":\"export default function CountLabel({ count }) {  return <h1>{count}</h1>}\"}},{\"id\":\"3ssAI2w2LN\",\"data\":{\"text\":\"Say you want to show whether the counter has increased or decreased since the last change. The <code>count</code> prop doesn‚Äôt tell you this ‚Äî you need to keep track of its previous value. Add the <code>prevCount</code> state variable to track it. Add another state variable called <code>trend</code> to hold whether the count has increased or decreased. Compare <code>prevCount</code> with <code>count</code>, and if they‚Äôre not equal, update both <code>prevCount</code> and <code>trend</code>. Now you can show both the current count prop and how it has changed since the last render.\"},\"type\":\"paragraph\"},{\"id\":\"xsGpddzhPA\",\"data\":{\"text\":\"App.jsCountLabel.jsResetFork1234567891011121314151617import{useState}from'react';exportdefaultfunctionCountLabel({count}){const[prevCount,setPrevCount] = useState(count);const[trend,setTrend] = useState(null);if(prevCount !== count){setPrevCount(count);setTrend(count &gt; prevCount ? 'increasing' : 'decreasing');}return(&lt;&gt;&lt;h1&gt;{count}&lt;/h1&gt;{trend &amp;&amp; &lt;p&gt;The count is {trend}&lt;/p&gt;}&lt;/&gt;);}Show more\"},\"type\":\"paragraph\"},{\"id\":\"IOofgwpTzN\",\"data\":{\"text\":\"Note that if you call a <code>set</code> function while rendering, it must be inside a condition like <code>prevCount !== count</code>, and there must be a call like <code>setPrevCount(count)</code> inside of the condition. Otherwise, your component would re-render in a loop until it crashes. Also, you can only update the state of the currently rendering component like this. Calling the <code>set</code> function of another component during rendering is an error. Finally, your <code>set</code> call should still <a href=\\\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\\\">update state without mutation</a> ‚Äî this doesn‚Äôt mean you can break other rules of <a href=\\\"https://react.dev/learn/keeping-components-pure\\\">pure functions.</a>\"},\"type\":\"paragraph\"},{\"id\":\"dkNPVMJVmy\",\"data\":{\"text\":\"This pattern can be hard to understand and is usually best avoided. However, it‚Äôs better than updating state in an effect. When you call the <code>set</code> function during render, React will re-render that component immediately after your component exits with a <code>return</code> statement, and before rendering the children. This way, children don‚Äôt need to render twice. The rest of your component function will still execute (and the result will be thrown away). If your condition is below all the Hook calls, you may add an early <code>return;</code> to restart rendering earlier.\"},\"type\":\"paragraph\"},{\"id\":\"zPYTLYDz7H\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"ci4rWLE5QA\",\"type\":\"header\",\"data\":{\"level\":2,\"text\":\"Troubleshooting&nbsp;\"}},{\"id\":\"zwfb6iHFtF\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"I‚Äôve updated the state, but logging gives me the old value&nbsp;\"}},{\"id\":\"Df9SlZIfoQ\",\"data\":{\"text\":\"Calling the <code>set</code> function does not change state in the running code:\"},\"type\":\"paragraph\"},{\"id\":\"YvCpG5--Ga\",\"type\":\"code\",\"data\":{\"code\":\"function handleClick() {  console.log(count);  // 0  setCount(count + 1); // Request a re-render with 1  console.log(count);  // Still 0!  setTimeout(() => {    console.log(count); // Also 0!  }, 5000);}\"}},{\"id\":\"CRiGafQ2RM\",\"data\":{\"text\":\"This is because <a href=\\\"https://react.dev/learn/state-as-a-snapshot\\\">states behaves like a snapshot.</a> Updating state requests another render with the new state value, but does not affect the <code>count</code> JavaScript variable in your already-running event handler.\"},\"type\":\"paragraph\"},{\"id\":\"KDpWgxEcwT\",\"data\":{\"text\":\"If you need to use the next state, you can save it in a variable before passing it to the <code>set</code> function:\"},\"type\":\"paragraph\"},{\"id\":\"4LPrD-Ro50\",\"type\":\"code\",\"data\":{\"code\":\"const nextCount = count + 1;setCount(nextCount);console.log(count);     // 0console.log(nextCount); // 1\"}},{\"id\":\"iPfMcAfMPy\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"vHtkxxzYP7\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"I‚Äôve updated the state, but the screen doesn‚Äôt update&nbsp;\"}},{\"id\":\"Io5RRLJKbs\",\"data\":{\"text\":\"React will ignore your update if the next state is equal to the previous state, as determined by an <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\\" target=\\\"_blank\\\"><code>Object.is</code></a> comparison. This usually happens when you change an object or an array in state directly:\"},\"type\":\"paragraph\"},{\"id\":\"AqRkMYYt_b\",\"type\":\"code\",\"data\":{\"code\":\"obj.x = 10;  // üö© Wrong: mutating existing objectsetObj(obj); // üö© Doesn't do anything\"}},{\"id\":\"GIZkd2yBjX\",\"data\":{\"text\":\"You mutated an existing <code>obj</code> object and passed it back to <code>setObj</code>, so React ignored the update. To fix this, you need to ensure that you‚Äôre always <a href=\\\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\\\">replacing objects and arrays in state instead of mutating them</a>:\"},\"type\":\"paragraph\"},{\"id\":\"ca0J8Z5iDj\",\"data\":{\"code\":\"// ‚úÖ Correct: creating a new objectsetObj({  ...obj,  x: 10});\"},\"type\":\"code\"},{\"id\":\"H0FR5Dnn1J\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"tHFZO1ctOV\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"I‚Äôm getting an error: ‚ÄúToo many re-renders‚Äù&nbsp;\"}},{\"id\":\"sOdRzV9qJH\",\"data\":{\"text\":\"You might get an error that says: <code>Too many re-renders. React limits the number of renders to prevent an infinite loop.</code> Typically, this means that you‚Äôre unconditionally setting state during render, so your component enters a loop: render, set state (which causes a render), render, set state (which causes a render), and so on. Very often, this is caused by a mistake in specifying an event handler:\"},\"type\":\"paragraph\"},{\"id\":\"3q8Ht-4bM5\",\"type\":\"code\",\"data\":{\"code\":\"// üö© Wrong: calls the handler during renderreturn <button onClick={handleClick()}>Click me</button>// ‚úÖ Correct: passes down the event handlerreturn <button onClick={handleClick}>Click me</button>// ‚úÖ Correct: passes down an inline functionreturn <button onClick={(e) => handleClick(e)}>Click me</button>\"}},{\"id\":\"fxvJQqssQW\",\"data\":{\"text\":\"If you can‚Äôt find the cause of this error, click on the arrow next to the error in the console and look through the JavaScript stack to find the specific <code>set</code> function call responsible for the error.\"},\"type\":\"paragraph\"},{\"id\":\"6vmfiirBfa\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"dSeokgpbJc\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"My initializer or updater function runs twice&nbsp;\"}},{\"id\":\"pkYcP7B01Q\",\"data\":{\"text\":\"In <a href=\\\"https://react.dev/reference/react/StrictMode\\\">Strict Mode</a>, React will call some of your functions twice instead of once:\"},\"type\":\"paragraph\"},{\"id\":\"ay06gO-rka\",\"type\":\"code\",\"data\":{\"code\":\"function TodoList() {  // This component function will run twice for every render.  const [todos, setTodos] = useState(() => {    // This initializer function will run twice during initialization.    return createTodos();  });  function handleClick() {    setTodos(prevTodos => {      // This updater function will run twice for every click.      return [...prevTodos, createTodo()];    });  }  // ...\"}},{\"id\":\"xXtUjPDv-4\",\"data\":{\"text\":\"This is expected and shouldn‚Äôt break your code.\"},\"type\":\"paragraph\"},{\"id\":\"MyFyTmukCs\",\"data\":{\"text\":\"This development-only behavior helps you <a href=\\\"https://react.dev/learn/keeping-components-pure\\\">keep components pure.</a> React uses the result of one of the calls, and ignores the result of the other call. As long as your component, initializer, and updater functions are pure, this shouldn‚Äôt affect your logic. However, if they are accidentally impure, this helps you notice the mistakes.\"},\"type\":\"paragraph\"},{\"id\":\"s505cBdL9A\",\"data\":{\"text\":\"For example, this impure updater function mutates an array in state:\"},\"type\":\"paragraph\"},{\"id\":\"DKp_l4W9rg\",\"type\":\"code\",\"data\":{\"code\":\"setTodos(prevTodos => {  // üö© Mistake: mutating state  prevTodos.push(createTodo());});\"}},{\"id\":\"i497NaZ9D0\",\"data\":{\"text\":\"Because React calls your updater function twice, you‚Äôll see the todo was added twice, so you‚Äôll know that there is a mistake. In this example, you can fix the mistake by <a href=\\\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\\\">replacing the array instead of mutating it</a>:\"},\"type\":\"paragraph\"},{\"id\":\"RgaMfQhqZ7\",\"type\":\"code\",\"data\":{\"code\":\"setTodos(prevTodos => {  // ‚úÖ Correct: replacing with new state  return [...prevTodos, createTodo()];});\"}},{\"id\":\"KmLLzFlYYA\",\"type\":\"paragraph\",\"data\":{\"text\":\"Now that this updater function is pure, calling it an extra time doesn‚Äôt make a difference in behavior. This is why React calling it twice helps you find mistakes. Only component, initializer, and updater functions need to be pure. Event handlers don‚Äôt need to be pure, so React will never call your event handlers twice.\"}},{\"id\":\"ru9bvc8KBq\",\"type\":\"paragraph\",\"data\":{\"text\":\"Read <a href=\\\"https://react.dev/learn/keeping-components-pure\\\">keeping components pure</a> to learn more.\"}},{\"id\":\"gbd_oHzZHI\",\"type\":\"delimiter\",\"data\":{}},{\"id\":\"L2pPewcgnw\",\"type\":\"header\",\"data\":{\"level\":3,\"text\":\"I‚Äôm trying to set state to a function, but it gets called instead&nbsp;\"}},{\"id\":\"803_5UZyAm\",\"data\":{\"text\":\"You can‚Äôt put a function into state like this:\"},\"type\":\"paragraph\"},{\"id\":\"89Rwhduwu0\",\"type\":\"code\",\"data\":{\"code\":\"const [fn, setFn] = useState(someFunction);function handleClick() {  setFn(someOtherFunction);}\"}},{\"id\":\"ccBwOmgC2L\",\"data\":{\"text\":\"Because you‚Äôre passing a function, React assumes that <code>someFunction</code> is an <a href=\\\"https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state\\\">initializer function</a>, and that <code>someOtherFunction</code> is an <a href=\\\"https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state\\\">updater function</a>, so it tries to call them and store the result. To actually store a function, you have to put <code>() =&gt;</code> before them in both cases. Then React will store the functions you pass.\"},\"type\":\"paragraph\"},{\"id\":\"l0XNO_uiFf\",\"type\":\"code\",\"data\":{\"code\":\"const [fn, setFn] = useState(() => someFunction);function handleClick() {  setFn(() => someOtherFunction);}\"}}]}",
                "label": "–°—Ç–∞—Ç—å—è 1",
                "id": "9e5b96be-47f3-4956-8406-94f549a6ed00",
                "file": [],
                "textHTML": "<p class=\"paragraph\"> Hey. Meet the new Editor. Then, try a demo ü§ì </p><h2>–ë–û–õ–¨–®–ê–Ø –ö–ê–†–¢–ò–ù–ö–ê</h2><figure class=\"fig-img\"><img class=\"img   \" src=\"https://api.directual.com/fileUploaded/kot-sandbox/7366b897-32ca-4c91-975c-3ad12433c907.jpg\" alt=\"–î–∞-–¥–∞, –±–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞\"><figcaption class=\"fig-cap\">–î–∞-–¥–∞, –±–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞</figcaption></figure><h2>–ö–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–æ –ø–æ–º–µ–Ω—å—à–µ</h2><figure class=\"fig-img\"><img class=\"img   \" src=\"https://api.directual.com/fileUploaded/kot-sandbox/13a48623-478e-4b33-8f51-9c8c0cca2f50.jpg\" alt=\"–ü–µ—Å–µ–ª—å\"><figcaption class=\"fig-cap\">–ü–µ—Å–µ–ª—å</figcaption></figure><p class=\"paragraph\"> <u class=\"cdx-underline\">–Ø —É–º–µ—é –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç</u> </p><p class=\"paragraph\"> <b><i>–í–æ–∑–º–æ–∂–Ω–æ –Ω–∏–∂–µ –¥–∞–∂–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —é—Ç—É–±</i></b> </p><div class=\"embed\"><iframe class=\"embed-youtube\" frameborder=\"0\" src=\"https://www.youtube.com/embed/ZFl1jFWXjoc?\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen ></iframe></div><h3>–í–∞—É, –¥–∞–∂–µ –∫–æ–¥ –µ—Å—Ç—å</h3>        <div className={`FPS_EDITOR_WRAPPER`}>\n            <div>\n                <div id={EDITOR_HOLDER_ID}/>\n            </div>\n            <div>\n                {\n                    !isReadonly &&\n                    <div>\n                        <Button accent icon=\"edit\" onClick={handleSave}>Save</Button>\n                    </div>\n                }\n            </div>\n        </div><table><tbody><tr><td>table column one</td><td>table column two</td></tr><tr><td>1</td><td>2</td></tr><tr><td>3</td><td>4</td></tr><tr><td>5</td><td>6</td></tr></tbody></table><br /><h1>Header 1</h1><h2>Header 2</h2><h3>Header 3</h3><h4>Header 4</h4><h5>Header 5</h5><h6>Header 6</h6><p class=\"paragraph\"> <b><i>–¢–∏–ø–∞ –∫–æ–¥</i></b> </p><pre><code class=\"code-block\">const handleChange = useCallback(async () =&gt; {\n  var savedData = await editorCore.current.save();\n  setEditorData(savedData);\n}, []);</code></pre><ol><li>1. —Å–ø–∏—Å–æ–∫\\</li></ol><blockquote ><p>—Ü–∏—Ç–∞—Ç–∫–∏</p><cite>–≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</cite></blockquote><h2>–æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É —Ä–∞–≤–µ–Ω 300px</h2><p class=\"paragraph\"> <i><mark class=\"cdx-marker\">–Ω–∞ header –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫–µ—Ä</mark></i> </p><h2>–ó–∞–∫–∏–Ω–µ–º –Ω–∏–∂–µ —Å—Ç–∞—Ç—å—é –∏–∑ —Å–∞–π—Ç–∞</h2><h1>useState</h1><p class=\"paragraph\"> <code>useState</code> is a React Hook that lets you add a <a href=\"https://react.dev/learn/state-a-components-memory\">state variable</a> to your component. </p><pre><code class=\"code-block\">const [state, setState] = useState(initialState)</code></pre><ul><li>ReferenceuseState(initialState)set&nbsp;functions, like&nbsp;setSomething(nextState)</li><li>useState(initialState)</li><li>set&nbsp;functions, like&nbsp;setSomething(nextState)</li><li>UsageAdding state to a componentUpdating state based on the previous stateUpdating objects and arrays in stateAvoiding recreating the initial stateResetting state with a keyStoring information from previous renders</li><li>Adding state to a component</li><li>Updating state based on the previous state</li><li>Updating objects and arrays in state</li><li>Avoiding recreating the initial state</li><li>Resetting state with a key</li><li>Storing information from previous renders</li><li>TroubleshootingI‚Äôve updated the state, but logging gives me the old valueI‚Äôve updated the state, but the screen doesn‚Äôt updateI‚Äôm getting an error: ‚ÄúToo many re-renders‚ÄùMy initializer or updater function runs twiceI‚Äôm trying to set state to a function, but it gets called instead</li><li>I‚Äôve updated the state, but logging gives me the old value</li><li>I‚Äôve updated the state, but the screen doesn‚Äôt update</li><li>I‚Äôm getting an error: ‚ÄúToo many re-renders‚Äù</li><li>My initializer or updater function runs twice</li><li>I‚Äôm trying to set state to a function, but it gets called instead</li></ul><br /><h2>Reference&nbsp;</h2><h3>useState(initialState)&nbsp;</h3><p class=\"paragraph\"> Call <code>useState</code> at the top level of your component to declare a <a href=\"https://react.dev/learn/state-a-components-memory\">state variable.</a> </p><pre><code class=\"code-block\">import { useState } from 'react';function MyComponent() {  const [age, setAge] = useState(28);  const [name, setName] = useState('Taylor');  const [todos, setTodos] = useState(() =&gt; createTodos());  // ...</code></pre><p class=\"paragraph\"> The convention is to name state variables like <code>[something, setSomething]</code> using <a href=\"https://javascript.info/destructuring-assignment\" target=\"_blank\">array destructuring.</a> </p><p class=\"paragraph\"> <a href=\"https://react.dev/reference/react/useState#usage\">See more examples below.</a> </p><h4>Parameters&nbsp;</h4><ul><li>initialState: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.If you pass a function as&nbsp;initialState, it will be treated as an&nbsp;initializer function. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.&nbsp;See an example below.</li><li>If you pass a function as&nbsp;initialState, it will be treated as an&nbsp;initializer function. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.&nbsp;See an example below.</li></ul><h4>Returns&nbsp;</h4><p class=\"paragraph\"> <code>useState</code> returns an array with exactly two values: </p><ol><li>The current state. During the first render, it will match the&nbsp;initialState&nbsp;you have passed.</li><li>The&nbsp;set&nbsp;function&nbsp;that lets you update the state to a different value and trigger a re-render.</li></ol><h4>Caveats&nbsp;</h4><ul><li>useState&nbsp;is a Hook, so you can only call it&nbsp;at the top level of your component&nbsp;or your own Hooks. You can‚Äôt call it inside loops or conditions. If you need that, extract a new component and move the state into it.</li><li>In Strict Mode, React will&nbsp;call your initializer function twice&nbsp;in order to&nbsp;help you find accidental impurities.&nbsp;This is development-only behavior and does not affect production. If your initializer function is pure (as it should be), this should not affect the behavior. The result from one of the calls will be ignored.</li></ul><br /><h3>set&nbsp;functions, like&nbsp;setSomething(nextState)&nbsp;</h3><p class=\"paragraph\"> The <code>set</code> function returned by <code>useState</code> lets you update the state to a different value and trigger a re-render. You can pass the next state directly, or a function that calculates it from the previous state: </p><pre><code class=\"code-block\">const [name, setName] = useState('Edward');function handleClick() {  setName('Taylor');  setAge(a =&gt; a + 1);  // ...</code></pre><h4>Parameters&nbsp;</h4><ul><li>nextState: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.If you pass a function as&nbsp;nextState, it will be treated as an&nbsp;updater function. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.&nbsp;See an example below.</li><li>If you pass a function as&nbsp;nextState, it will be treated as an&nbsp;updater function. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.&nbsp;See an example below.</li></ul><h4>Returns&nbsp;</h4><p class=\"paragraph\"> <code>set</code> functions do not have a return value. </p><h4>Caveats&nbsp;</h4><ul><li>The set function only updates the state variable for the next render. If you read the state variable after calling the set function, you will still get the old value that was on the screen before your call.</li><li>If the new value you provide is identical to the current state, as determined by an Object.is comparison, React will skip re-rendering the component and its children. This is an optimization. Although in some cases React may still need to call your component before skipping the children, it shouldn‚Äôt affect your code.</li><li>React batches state updates. It updates the screen after all the event handlers have run and have called their set functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use flushSync.</li><li>Calling the set function during rendering is only allowed from within the currently rendering component. React will discard its output and immediately attempt to render it again with the new state. This pattern is rarely needed, but you can use it to store information from the previous renders. See an example below.</li><li>In Strict Mode, React will call your updater function twice in order to help you find accidental impurities. This is development-only behavior and does not affect production. If your updater function is pure (as it should be), this should not affect the behavior. The result from one of the calls will be ignored.</li></ul><br /><h2>Usage&nbsp;</h2><h3>Adding state to a component&nbsp;</h3><p class=\"paragraph\"> Call <code>useState</code> at the top level of your component to declare one or more <a href=\"https://react.dev/learn/state-a-components-memory\">state variables.</a> </p><pre><code class=\"code-block\">import { useState } from 'react';function MyComponent() {  const [age, setAge] = useState(42);  const [name, setName] = useState('Taylor');  // ...</code></pre><p class=\"paragraph\"> The convention is to name state variables like <code>[something, setSomething]</code> using <a href=\"https://javascript.info/destructuring-assignment\" target=\"_blank\">array destructuring.</a> </p><p class=\"paragraph\"> <code>useState</code> returns an array with exactly two items: </p><ol><li>The&nbsp;current state&nbsp;of this state variable, initially set to the&nbsp;initial state&nbsp;you provided.</li><li>The&nbsp;set&nbsp;function&nbsp;that lets you change it to any other value in response to interaction.</li></ol><p class=\"paragraph\"> To update what‚Äôs on the screen, call the <code>set</code> function with some next state: </p><pre><code class=\"code-block\">function handleClick() {  setName('Robin');}</code></pre><p class=\"paragraph\"> React will store the next state, render your component again with the new values, and update the UI. </p><h3>Pitfall</h3><p class=\"paragraph\"> Calling the <code>set</code> function <a href=\"https://react.dev/reference/react/useState#ive-updated-the-state-but-logging-gives-me-the-old-value\">does not change the current state in the already executing code</a>: </p><pre><code class=\"code-block\">function handleClick() {  setName('Robin');  console.log(name); // Still \"Taylor\"!}</code></pre><p class=\"paragraph\"> It only affects what <code>useState</code> will return starting from the next render. </p><h4>Examples of objects and arrays in state</h4><p class=\"paragraph\"> 1.Form (object)2.Form (nested object)3.List (array)4.Writing concise update logic with Immer </p><h4>Example&nbsp;1&nbsp;of&nbsp;4:&nbsp;Form (object)&nbsp;</h4><p class=\"paragraph\"> In this example, the <code>form</code> state variable holds an object. Each input has a change handler that calls <code>setForm</code> with the next state of the entire form. The <code>{ ...form }</code> spread syntax ensures that the state object is replaced rather than mutated. </p><p class=\"paragraph\"> App.jsDownloadResetFork123456789101112131415161718192021222324252627282930313233343536import{useState}from'react';exportdefaultfunctionForm(){const[form,setForm] = useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com',});return(&lt;&gt;&lt;label&gt;        First name:&lt;inputvalue={form.firstName}onChange={e=&gt;{setForm({...form,firstName:e.target.value});}}/&gt;&lt;/label&gt;&lt;label&gt;        Last name:&lt;inputvalue={form.lastName}onChange={e=&gt;{setForm({...form,lastName:e.target.value});}}/&gt;&lt;/label&gt;&lt;label&gt;Show moreNextExample </p><br /><h3>Avoiding recreating the initial state&nbsp;</h3><p class=\"paragraph\"> React saves the initial state once and ignores it on the next renders. </p><pre><code class=\"code-block\">function TodoList() {  const [todos, setTodos] = useState(createInitialTodos());  // ...</code></pre><p class=\"paragraph\"> Although the result of <code>createInitialTodos()</code> is only used for the initial render, you‚Äôre still calling this function on every render. This can be wasteful if it‚Äôs creating large arrays or performing expensive calculations. </p><p class=\"paragraph\"> To solve this, you may pass it as an initializer function to <code>useState</code> instead: </p><pre><code class=\"code-block\">function TodoList() {  const [todos, setTodos] = useState(createInitialTodos);  // ...</code></pre><p class=\"paragraph\"> Notice that you‚Äôre passing <code>createInitialTodos</code>, which is the function itself, and not <code>createInitialTodos()</code>, which is the result of calling it. If you pass a function to <code>useState</code>, React will only call it during initialization. </p><p class=\"paragraph\"> React may <a href=\"https://react.dev/reference/react/useState#my-initializer-or-updater-function-runs-twice\">call your initializers twice</a> in development to verify that they are <a href=\"https://react.dev/learn/keeping-components-pure\">pure.</a> </p><h4>The difference between passing an initializer and passing the initial state directly</h4><p class=\"paragraph\"> 1.Passing the initializer function2.Passing the initial state directly </p><h4>Example&nbsp;1&nbsp;of&nbsp;2:&nbsp;Passing the initializer function&nbsp;</h4><p class=\"paragraph\"> This example passes the initializer function, so the <code>createInitialTodos</code> function only runs during initialization. It does not run when component re-renders, such as when you type into the input. </p><br /><h3>Resetting state with a key&nbsp;</h3><p class=\"paragraph\"> You‚Äôll often encounter the <code>key</code> attribute when <a href=\"https://react.dev/learn/rendering-lists\">rendering lists.</a> However, it also serves another purpose. </p><p class=\"paragraph\"> You can reset a component‚Äôs state by passing a different <code>key</code> to a component. In this example, the Reset button changes the <code>version</code> state variable, which we pass as a <code>key</code> to the <code>Form</code>. When the <code>key</code> changes, React re-creates the <code>Form</code> component (and all of its children) from scratch, so its state gets reset. </p><p class=\"paragraph\"> Read <a href=\"https://react.dev/learn/preserving-and-resetting-state\">preserving and resetting state</a> to learn more. </p><br /><h3>Storing information from previous renders&nbsp;</h3><p class=\"paragraph\"> Usually, you will update state in event handlers. However, in rare cases you might want to adjust state in response to rendering ‚Äî for example, you might want to change a state variable when a prop changes. </p><p class=\"paragraph\"> In most cases, you don‚Äôt need this: </p><ul><li>If the value you need can be computed entirely from the current props or other state,&nbsp;remove that redundant state altogether.&nbsp;If you‚Äôre worried about recomputing too often, the&nbsp;useMemo&nbsp;Hook&nbsp;can help.</li><li>If you want to reset the entire component tree‚Äôs state,&nbsp;pass a different&nbsp;key&nbsp;to your component.</li><li>If you can, update all the relevant state in the event handlers.</li></ul><p class=\"paragraph\"> In the rare case that none of these apply, there is a pattern you can use to update state based on the values that have been rendered so far, by calling a <code>set</code> function while your component is rendering. </p><p class=\"paragraph\"> Here‚Äôs an example. This <code>CountLabel</code> component displays the <code>count</code> prop passed to it: </p><pre><code class=\"code-block\">export default function CountLabel({ count }) {  return &lt;h1&gt;{count}&lt;/h1&gt;}</code></pre><p class=\"paragraph\"> Say you want to show whether the counter has increased or decreased since the last change. The <code>count</code> prop doesn‚Äôt tell you this ‚Äî you need to keep track of its previous value. Add the <code>prevCount</code> state variable to track it. Add another state variable called <code>trend</code> to hold whether the count has increased or decreased. Compare <code>prevCount</code> with <code>count</code>, and if they‚Äôre not equal, update both <code>prevCount</code> and <code>trend</code>. Now you can show both the current count prop and how it has changed since the last render. </p><p class=\"paragraph\"> App.jsCountLabel.jsResetFork1234567891011121314151617import{useState}from'react';exportdefaultfunctionCountLabel({count}){const[prevCount,setPrevCount] = useState(count);const[trend,setTrend] = useState(null);if(prevCount !== count){setPrevCount(count);setTrend(count &gt; prevCount ? 'increasing' : 'decreasing');}return(&lt;&gt;&lt;h1&gt;{count}&lt;/h1&gt;{trend &amp;&amp; &lt;p&gt;The count is {trend}&lt;/p&gt;}&lt;/&gt;);}Show more </p><p class=\"paragraph\"> Note that if you call a <code>set</code> function while rendering, it must be inside a condition like <code>prevCount !== count</code>, and there must be a call like <code>setPrevCount(count)</code> inside of the condition. Otherwise, your component would re-render in a loop until it crashes. Also, you can only update the state of the currently rendering component like this. Calling the <code>set</code> function of another component during rendering is an error. Finally, your <code>set</code> call should still <a href=\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\">update state without mutation</a> ‚Äî this doesn‚Äôt mean you can break other rules of <a href=\"https://react.dev/learn/keeping-components-pure\">pure functions.</a> </p><p class=\"paragraph\"> This pattern can be hard to understand and is usually best avoided. However, it‚Äôs better than updating state in an effect. When you call the <code>set</code> function during render, React will re-render that component immediately after your component exits with a <code>return</code> statement, and before rendering the children. This way, children don‚Äôt need to render twice. The rest of your component function will still execute (and the result will be thrown away). If your condition is below all the Hook calls, you may add an early <code>return;</code> to restart rendering earlier. </p><br /><h2>Troubleshooting&nbsp;</h2><h3>I‚Äôve updated the state, but logging gives me the old value&nbsp;</h3><p class=\"paragraph\"> Calling the <code>set</code> function does not change state in the running code: </p><pre><code class=\"code-block\">function handleClick() {  console.log(count);  // 0  setCount(count + 1); // Request a re-render with 1  console.log(count);  // Still 0!  setTimeout(() =&gt; {    console.log(count); // Also 0!  }, 5000);}</code></pre><p class=\"paragraph\"> This is because <a href=\"https://react.dev/learn/state-as-a-snapshot\">states behaves like a snapshot.</a> Updating state requests another render with the new state value, but does not affect the <code>count</code> JavaScript variable in your already-running event handler. </p><p class=\"paragraph\"> If you need to use the next state, you can save it in a variable before passing it to the <code>set</code> function: </p><pre><code class=\"code-block\">const nextCount = count + 1;setCount(nextCount);console.log(count);     // 0console.log(nextCount); // 1</code></pre><br /><h3>I‚Äôve updated the state, but the screen doesn‚Äôt update&nbsp;</h3><p class=\"paragraph\"> React will ignore your update if the next state is equal to the previous state, as determined by an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\"><code>Object.is</code></a> comparison. This usually happens when you change an object or an array in state directly: </p><pre><code class=\"code-block\">obj.x = 10;  // üö© Wrong: mutating existing objectsetObj(obj); // üö© Doesn't do anything</code></pre><p class=\"paragraph\"> You mutated an existing <code>obj</code> object and passed it back to <code>setObj</code>, so React ignored the update. To fix this, you need to ensure that you‚Äôre always <a href=\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\">replacing objects and arrays in state instead of mutating them</a>: </p><pre><code class=\"code-block\">// ‚úÖ Correct: creating a new objectsetObj({  ...obj,  x: 10});</code></pre><br /><h3>I‚Äôm getting an error: ‚ÄúToo many re-renders‚Äù&nbsp;</h3><p class=\"paragraph\"> You might get an error that says: <code>Too many re-renders. React limits the number of renders to prevent an infinite loop.</code> Typically, this means that you‚Äôre unconditionally setting state during render, so your component enters a loop: render, set state (which causes a render), render, set state (which causes a render), and so on. Very often, this is caused by a mistake in specifying an event handler: </p><pre><code class=\"code-block\">// üö© Wrong: calls the handler during renderreturn &lt;button onClick={handleClick()}&gt;Click me&lt;/button&gt;// ‚úÖ Correct: passes down the event handlerreturn &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;// ‚úÖ Correct: passes down an inline functionreturn &lt;button onClick={(e) =&gt; handleClick(e)}&gt;Click me&lt;/button&gt;</code></pre><p class=\"paragraph\"> If you can‚Äôt find the cause of this error, click on the arrow next to the error in the console and look through the JavaScript stack to find the specific <code>set</code> function call responsible for the error. </p><br /><h3>My initializer or updater function runs twice&nbsp;</h3><p class=\"paragraph\"> In <a href=\"https://react.dev/reference/react/StrictMode\">Strict Mode</a>, React will call some of your functions twice instead of once: </p><pre><code class=\"code-block\">function TodoList() {  // This component function will run twice for every render.  const [todos, setTodos] = useState(() =&gt; {    // This initializer function will run twice during initialization.    return createTodos();  });  function handleClick() {    setTodos(prevTodos =&gt; {      // This updater function will run twice for every click.      return [...prevTodos, createTodo()];    });  }  // ...</code></pre><p class=\"paragraph\"> This is expected and shouldn‚Äôt break your code. </p><p class=\"paragraph\"> This development-only behavior helps you <a href=\"https://react.dev/learn/keeping-components-pure\">keep components pure.</a> React uses the result of one of the calls, and ignores the result of the other call. As long as your component, initializer, and updater functions are pure, this shouldn‚Äôt affect your logic. However, if they are accidentally impure, this helps you notice the mistakes. </p><p class=\"paragraph\"> For example, this impure updater function mutates an array in state: </p><pre><code class=\"code-block\">setTodos(prevTodos =&gt; {  // üö© Mistake: mutating state  prevTodos.push(createTodo());});</code></pre><p class=\"paragraph\"> Because React calls your updater function twice, you‚Äôll see the todo was added twice, so you‚Äôll know that there is a mistake. In this example, you can fix the mistake by <a href=\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\">replacing the array instead of mutating it</a>: </p><pre><code class=\"code-block\">setTodos(prevTodos =&gt; {  // ‚úÖ Correct: replacing with new state  return [...prevTodos, createTodo()];});</code></pre><p class=\"paragraph\"> Now that this updater function is pure, calling it an extra time doesn‚Äôt make a difference in behavior. This is why React calling it twice helps you find mistakes. Only component, initializer, and updater functions need to be pure. Event handlers don‚Äôt need to be pure, so React will never call your event handlers twice. </p><p class=\"paragraph\"> Read <a href=\"https://react.dev/learn/keeping-components-pure\">keeping components pure</a> to learn more. </p><br /><h3>I‚Äôm trying to set state to a function, but it gets called instead&nbsp;</h3><p class=\"paragraph\"> You can‚Äôt put a function into state like this: </p><pre><code class=\"code-block\">const [fn, setFn] = useState(someFunction);function handleClick() {  setFn(someOtherFunction);}</code></pre><p class=\"paragraph\"> Because you‚Äôre passing a function, React assumes that <code>someFunction</code> is an <a href=\"https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state\">initializer function</a>, and that <code>someOtherFunction</code> is an <a href=\"https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state\">updater function</a>, so it tries to call them and store the result. To actually store a function, you have to put <code>() =&gt;</code> before them in both cases. Then React will store the functions you pass. </p><pre><code class=\"code-block\">const [fn, setFn] = useState(() =&gt; someFunction);function handleClick() {  setFn(() =&gt; someOtherFunction);}</code></pre>"
            }
        ],
        "contentHTML": "textHTML",
        "_api_": {
            "sl": "https://api.directual.com/good/api/v5/data/notes/get?appID=0d165fd9-a082-4cdf-8e9a-ea69f794698c"
        }
    }
}

// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
export const Regular = {
    args: {
      data: editorData,
      auth: {},
      locale: 'ENG'
    }
};